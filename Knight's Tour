package application;

import java.util.*;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;

public class Main extends Application {
	int size = 8;
	int[][] rank;
	Pane board;
	boolean done = false;
	@Override
	public void start(Stage primaryStage) {
		VBox root = new VBox();
		board = new Pane();
		for(int i = 0; i < size; i++){
			for(int j = 0; j < size; j++){
				Rectangle r = new Rectangle((600. / size) * i, (600. / size) * j, 600. / size, 600. / size);
				r.setFill(Color.TRANSPARENT);
				r.setStroke(Color.BLACK);
				board.getChildren().add(r);
			}
		}
		BorderPane buttonPane = new BorderPane();
		buttonPane.setPadding(new Insets(0, 250, 0, 250));
		Button solve = new Button("Solve");
		Button reset = new Button("Reset");
		buttonPane.setLeft(solve);
		buttonPane.setRight(reset);
		root.getChildren().addAll(board, buttonPane);

		rank = new int[size][size];
		for(int i = 0; i < size; i++){
			for(int j = 0; j < size; j++){
				if((i == 0 || i == size - 1) && (j == 0 || j == size - 1))
					rank[i][j] = 2;
				else if((i == 1 || i == size - 2) && (j == 1 || j == size - 2))
					rank[i][j] = 4;
				else if((i == 0 || i == 1 || i == size - 1 || i == size - 2) && (j == 0 || j == 1 || j == size - 1 || j == size - 2))
					rank[i][j] = 3;
				else if(i == 0 || i == size - 1 || j == 0 || j == size - 1)
					rank[i][j] = 4;
				else if(i == 1 || j == 1 || i == size - 2 || j == size - 2)
					rank[i][j] = 6;
				else
					rank[i][j] = 8;
			}
		}

		board.setOnMouseClicked(e -> {
			if(!done){
				double x = ((int)(e.getSceneX() / (600. / size))) * (600. / size) + 300. / size, y = ((int)(e.getSceneY() / (600. / size))) * (600. / size) + 300. / size;
				Circle c = new Circle(x, y, 600. / size / 4);
				if(board.getChildren().get(board.getChildren().size() - 1) instanceof Circle)
					board.getChildren().remove(board.getChildren().size() - 1);
				c.setFill(Color.RED);
				board.getChildren().add(c);
			}
		});

		solve.setOnAction(e -> {
			if(board.getChildren().get(board.getChildren().size() - 1) instanceof Circle){
				vis = new boolean[size][size];
				Circle c = (Circle)(board.getChildren().get(board.getChildren().size() - 1));
				done = done || solve((int)(c.getCenterX() / (600. / size)), (int)(c.getCenterY() / (600. / size)));
				if(done){
					Line l = (Line)board.getChildren().get(board.getChildren().size() - 1);
					Circle f = new Circle(l.getEndX(), l.getEndY(), 600. / size / 4);
					f.setFill(Color.BLUE);
					board.getChildren().add(f);
				}
			}
		});
		
		reset.setOnAction(e -> {
			done = false;
			while(!(board.getChildren().get(board.getChildren().size() - 1) instanceof Rectangle)){
				board.getChildren().remove(board.getChildren().size() - 1);
			}
		});

		Scene scene = new Scene(root, 600, 626);
		primaryStage.setTitle("Knight's Tour");
		primaryStage.setScene(scene);
		primaryStage.show();

	}

	public static void main(String[] args) {
		launch(args);
	}

	boolean[][] vis;
	int[] X = {-2, -2, -1, -1, 2, 2, 1, 1};
	int[] Y = {-1, 1, -2, 2, -1, 1, -2, 2};
	boolean solve(int x, int y){
		PriorityQueue<Node> pq = new PriorityQueue<>();
		vis[x][y] = true;
		for(int i = 0; i < 8; i++){
			int newX = x + X[i];
			int newY = y + Y[i];
			if(newX >= 0 && newX < size && newY >= 0 && newY < size && !vis[newX][newY]) {
				pq.offer(new Node(newX, newY, rank[newX][newY]));
			}
		}
		if(pq.isEmpty()){
			for(int i = 0; i < size; i++){
				for(int j = 0; j < size; j++){
					if(!vis[i][j]){
						vis[x][y] = false;
						return false;
					}
				}
			}
			return true;
		}
		while(!pq.isEmpty()){
			Node n = pq.poll();
			Line l = new Line(600. / size * x + 300. / size, 600. / size * y + 300. / size, 600. / size * n.x + 300. / size, 600. / size * n.y + 300. / size);
			board.getChildren().add(l);
			if(solve(n.x, n.y))
				return true;
			board.getChildren().remove(board.getChildren().size() - 1);
		}
		vis[x][y] = false;
		return false;	
	}

	class Node implements Comparable<Node>{
		int x, y, rank;

		public Node(int x, int y, int rank){
			this.x = x;
			this.y = y;
			this.rank = rank;
		}

		@Override
		public int compareTo(Node other) {
			return rank - other.rank;
		}
	}

}

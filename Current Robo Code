package org.usfirst.frc.team1661.robot;

import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import com.ctre.CANTalon;

public class Robot extends IterativeRobot {
	CANTalon fLeft = new CANTalon(2); 
	CANTalon bLeft = new CANTalon(3); 
	CANTalon fRight = new CANTalon(0); 
	CANTalon bRight = new CANTalon(1); 
	CANTalon climb1 = new CANTalon(5);
	CANTalon climb2 = new CANTalon(6);

	SmartDashboard dash = new SmartDashboard();
	SendableChooser<Integer> autoChoose = new SendableChooser<>();
	//DigitalInput lim = new DigitalInput(0);
	Timer timer = new Timer();
	//CameraServer cam;
	double x, y, mag, theta, rotation, climbVal = 0.0;
	boolean isShooting = false;
	RobotDrive myRobot = new RobotDrive(fLeft, bLeft, fRight, bRight);
	XboxController controller = new XboxController(0);

	@Override
	public void robotInit() {
		fLeft.enable();
		bLeft.enable();
		fRight.enable();
		bRight.enable();
		fLeft.setInverted(false);
		bLeft.setInverted(true);
		fRight.setInverted(false);
		bRight.setInverted(true);
		//cam = CameraServer.getInstance();
		//cam.startAutomaticCapture(0);

		autoChoose.addDefault("Center Gear Place", 0);
		autoChoose.addObject("Side Baseline", 1);
		autoChoose.addObject("Left Gear Place", 2);
		autoChoose.addObject("Right Gear Place", 3);
		SmartDashboard.putData("Auto Select", autoChoose);
		//BASELINE DASH VARS
		SmartDashboard.putNumber("Baseline Speed  ", .75);
		SmartDashboard.putNumber("Baseline Time  ", 1);
		//LEFT GEAR DASH VARS
		SmartDashboard.putNumber("Left Gear Initial Speed ", .2);
		SmartDashboard.putNumber("Left Gear Initial Time  ", 3.1);
		SmartDashboard.putNumber("Left Gear Rotation Speed ", .3);
		SmartDashboard.putNumber("Left Gear Rotation Time  ", .85);
		SmartDashboard.putNumber("Left Gear Final Speed  ", .2);
		SmartDashboard.putNumber("Left Gear Final Time  ", 1.7);
		//RIGHT GEAR DASH VARS
		SmartDashboard.putNumber("Right Gear Initial Speed ", .2);
		SmartDashboard.putNumber("Right Gear Initial Time  ", 3.1);
		SmartDashboard.putNumber("Right Gear Rotation Speed ", .3);
		SmartDashboard.putNumber("Right Gear Rotation Time  ", .85);
		SmartDashboard.putNumber("Right Gear Final Speed  ", .2);
		SmartDashboard.putNumber("Right Gear Final Time  ", 1.7);
		//CENTER GEAR DASH VARS
		SmartDashboard.putNumber("Center Gear Speed  ", .2);
		SmartDashboard.putNumber("Center Gear Time  ", 3.6);
	}

	@Override
	public void autonomousInit() {
		timer.start();
		autoChoose.getSelected();
	}

	@Override
	public void autonomousPeriodic() {
		//BASELINE
		double baselineSpeed = SmartDashboard.getNumber("Baseline Speed  ");
		double baselineTime = SmartDashboard.getNumber("Baseline Time  ");
		//LEFT GEAR
		double leftGearSpeed1 = SmartDashboard.getNumber("Left Gear Initial Speed ");
		double leftGearTime1 = SmartDashboard.getNumber("Left Gear Initial Time  ");
		double leftGearRotateSpeed = SmartDashboard.getNumber("Left Gear Rotation Speed ");
		double leftGearRotateTime = SmartDashboard.getNumber("Left Gear Rotation Time  ");
		double leftGearSpeed2 = SmartDashboard.getNumber("Left Gear Final Speed  ");
		double leftGearTime2 = SmartDashboard.getNumber("Left Gear Final Time  ");
		//RIGHT GEAR
		double rightGearSpeed1 = SmartDashboard.getNumber("Right Gear Initial Speed ");
		double rightGearTime1 = SmartDashboard.getNumber("Right Gear Initial Time  ");
		double rightGearRotateSpeed = SmartDashboard.getNumber("Right Gear Rotation Speed ");
		double rightGearRotateTime = SmartDashboard.getNumber("Right Gear Rotation Time  ");
		double rightGearSpeed2 = SmartDashboard.getNumber("Right Gear Final Speed  ");
		double rightGearTime2 = SmartDashboard.getNumber("Right Gear Final Time  ");
		//CENTER GEAR
		double centerGearSpeed = SmartDashboard.getNumber("Center Gear Speed  ");
		double centerGearTime = SmartDashboard.getNumber("Center Gear Time  ");
		//CHOOSE AUTO MODE
		int n = autoChoose.getSelected();
		//SIDE BASELINE
		if(n == 1) {
			if(timer.get() <= baselineTime)
				myRobot.mecanumDrive_Polar(baselineSpeed, 87, 0);
			else
				myRobot.mecanumDrive_Polar(0, 0, 0);
		}
		//LEFT GEAR PLACE
		else if(n == 2) {
			if(timer.get() <= leftGearTime1){
				myRobot.mecanumDrive_Polar(leftGearSpeed1, 87, 0);
			}else if(timer.get() <= leftGearTime1 + leftGearRotateTime){ 
				fLeft.setInverted(true);
				bRight.setInverted(false);
				myRobot.mecanumDrive_Polar(0, 0, -leftGearRotateSpeed);
			}else if(timer.get() <= leftGearTime1 + leftGearRotateTime + leftGearTime2){
				fLeft.setInverted(false);
				bRight.setInverted(true);
				myRobot.mecanumDrive_Polar(leftGearSpeed2, 87, 0);
			}else{
				myRobot.mecanumDrive_Polar(0, 0, 0);
			}
		}
		//RIGHT GEAR PLACE
		else if(n == 3) {
			if(timer.get() <= rightGearTime1){
				myRobot.mecanumDrive_Polar(rightGearSpeed1, 87, 0);
			}else if(timer.get() <= rightGearTime1 + rightGearRotateTime){ 
				fLeft.setInverted(true);
				bRight.setInverted(false);
				myRobot.mecanumDrive_Polar(0, 0, rightGearRotateSpeed);
			}else if(timer.get() <= rightGearTime1 + rightGearRotateTime + rightGearTime2){
				fLeft.setInverted(false);
				bRight.setInverted(true);
				myRobot.mecanumDrive_Polar(rightGearSpeed2, 87, 0);
			}else{
				myRobot.mecanumDrive_Polar(0, 0, 0);
			}
		}
		//CENTER GEAR PLACE
		else if(n == 0) {
			if(timer.get() <= centerGearTime){
				myRobot.mecanumDrive_Polar(centerGearSpeed, 87, 0);
			}else{        
				myRobot.mecanumDrive_Polar(0, 0, 0);
			}
		}

	}

	@Override
	public void teleopPeriodic() {
		while(isEnabled() && isOperatorControl()){
			x = controller.getRawAxis(0);
			y = -controller.getRawAxis(1);
			if(Math.sqrt((x * x) + (y * y)) > 0.25)
				mag = Math.sqrt((x * x) + (y * y));
			else
				mag = 0;
			if(Math.abs(controller.getRawAxis(4)) > 0.25)
				rotation = -controller.getRawAxis(4);
			else
				rotation = 0;
			if(x < 0){
				if(y > 0)
					theta = 180 - Math.abs(Math.atan(y/x) * 180 / Math.PI);
				else
					theta = 180 + Math.atan(y/x) * 180 / Math.PI;
			}else{
				if(y > 0)
					theta = Math.atan(y/x) * 180 / Math.PI;
				else
					theta = Math.atan(y/x) * 180 / Math.PI + 360;
			}
			if(controller.getTriggerAxis(Hand.kLeft) > .05){
				if(theta > -45 && theta <= 45)
					theta = 0;
				else if(theta > 45 && theta <= 135)
					theta = 90.9;
				else if(theta > 135 && theta <= 225)
					theta = 180;
				else
					theta = 270;
			}
			if(Math.abs(rotation) > 0.25){
				mag = 0;
				theta = 0;
				fLeft.setInverted(true);
				bRight.setInverted(false);
			}else{
				fLeft.setInverted(false);
				bRight.setInverted(true);
			}
			if(controller.getTriggerAxis(Hand.kLeft) > 0.5)
				myRobot.mecanumDrive_Polar(mag * 0.4, theta, rotation * 0.3);
			else
				myRobot.mecanumDrive_Polar(mag , theta, rotation * 0.7);

			//CLIMBER BLOCK
			if(/*lim.get() && */controller.getTriggerAxis(Hand.kRight) > 0.2)
				climbVal = controller.getTriggerAxis(Hand.kRight);
			else
				climbVal = 0;
			if(/*lim.get() && */climbVal > 0.2){
				climb1.set(climbVal);
				climb2.set(climbVal);
			}else{
				climb1.set(0);
				climb2.set(0);
			}
			if(controller.getTriggerAxis(Hand.kRight) > 0.2 /*&& climb1.getOutputCurrent() > 5*/){
				controller.setRumble(RumbleType.kLeftRumble, 1);
				controller.setRumble(RumbleType.kRightRumble, 1);
			}else{
				controller.setRumble(RumbleType.kLeftRumble, 0);
				controller.setRumble(RumbleType.kRightRumble, 0);
			}
		}
	}

	@Override
	public void testPeriodic() {
		bRight.set(.5);
	}
}

import java.util.Arrays;

public class HW33<E extends Comparable<E>> {
	
	public static void main(String[] parkerIsChowMein){
		HW33<Integer> heap = new HW33<>();
		heap.offer(7);
		heap.offer(3);
		heap.offer(823);
		heap.offer(23);
		heap.offer(42);
		heap.offer(2);
		heap.offer(87);
		System.out.println(heap);
		System.out.println(heap.delete(3));
		System.out.println(heap);
	}

	private int size = 0, capacity = 10;
	private E[] data = (E[]) new Comparable[capacity];

	// helper methods
	private int leftChildIndex(int parentIndex) { return 2 * parentIndex + 1; }
	private int rightChildIndex(int parentIndex) { return 2 * parentIndex + 2; }
	private int parentIndex(int childIndex) { return (childIndex - 1) / 2; }

	private boolean hasLeftChild(int parentIndex) { return leftChildIndex(parentIndex) < size; }
	private boolean hasRightChild(int parentIndex) { return rightChildIndex(parentIndex) < size; }
	private boolean hasParent(int childIndex) { return childIndex > 0; }

	private E leftChild(int parentIndex) { return data[leftChildIndex(parentIndex)]; }
	private E rightChild(int parentIndex) { return data[rightChildIndex(parentIndex)]; }
	private E parent(int childIndex) { return data[parentIndex(childIndex)]; }

	private void ensureCapacity() {
		if (size == capacity) {
			capacity *= 2;
			data = Arrays.copyOf(data, capacity);
		}
	}

	public E peek() {
		if (size == 0) return null;
		return data[0];
	}

	public void offer(E e) {
		ensureCapacity();
		data[size++] = e;
		percolateUp();
	}
	
	public E poll() {
		if (size == 0) return null;
		E min = data[0];
		data[0] = data[--size];
		percolateDown();
		return min;
	}
	
	public boolean delete(E x) {
		int index = -1;
		for(int i = 0; i < size; i++) {
			if(data[i].compareTo(x) == 0)
				index = i;
		}
		if(index == -1) return false;
		data[index] = data[--size];
		while (hasLeftChild(index)) {
			int smallerIndex = leftChildIndex(index);
			if (hasRightChild(index) && rightChild(index).compareTo(leftChild(index)) < 0)
				smallerIndex = rightChildIndex(index);
			if (data[index].compareTo(data[smallerIndex]) < 0) break;
			E tmp = data[index];
			data[index] = data[smallerIndex];
			data[smallerIndex] = tmp;
			index = smallerIndex;
		}
		return true;
	}
	
	@Override
	public String toString() {
		if(size == 0) return null;
		String s = "[";
		for(int i = 0; i < size - 1; i++) {
			s += data[i] + ", ";
		}
		s += data[size - 1] + "]";
		return s;
	}
	
	// bubble-up, percolate-up, sift-up, trickle-up, heapify-up, or cascade-up
		private void percolateUp() {
			int index = size - 1;
			while (hasParent(index) && parent(index).compareTo(data[index]) > 0) {
				E tmp = parent(index);
				data[parentIndex(index)] = data[index];
				data[index] = tmp;
				index = parentIndex(index);
			}
		}
		
	// bubble-down, percolate-down, sift-down, trickle down, heapify-down, cascade-down, and extract-min/max
	private void percolateDown() {
		int index = 0;
		while (hasLeftChild(index)) {
			int smallerIndex = leftChildIndex(index);
			if (hasRightChild(index) && rightChild(index).compareTo(leftChild(index)) < 0)
				smallerIndex = rightChildIndex(index);
			if (data[index].compareTo(data[smallerIndex]) < 0) break;
			E tmp = data[index];
			data[index] = data[smallerIndex];
			data[smallerIndex] = tmp;
			index = smallerIndex;
		}
	}
}
